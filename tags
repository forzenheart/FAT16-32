!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
A	test/testUnion.cpp	/^A::A(int fd)$/;"	f	class:A
A	test/testUnion.cpp	/^A::A(void *h)$/;"	f	class:A
A	test/testUnion.cpp	/^class A {$/;"	c	file:
BPB_BkBootSec	base/FATFATDataDefine.h	110;"	d
BPB_BytsPerClus	base/FATFATDataDefine.h	33;"	d
BPB_BytsPerSec	base/FATFATDataDefine.h	31;"	d
BPB_ExtFlags	base/FATFATDataDefine.h	98;"	d
BPB_FATSz16	base/FATFATDataDefine.h	51;"	d
BPB_FATSz32	base/FATFATDataDefine.h	96;"	d
BPB_FSInfo	base/FATFATDataDefine.h	109;"	d
BPB_FSVer	base/FATFATDataDefine.h	107;"	d
BPB_HiddSec	base/FATFATDataDefine.h	57;"	d
BPB_Media	base/FATFATDataDefine.h	49;"	d
BPB_NumFATs	base/FATFATDataDefine.h	40;"	d
BPB_NumHeads	base/FATFATDataDefine.h	55;"	d
BPB_Reserved	base/FATFATDataDefine.h	112;"	d
BPB_RootClus	base/FATFATDataDefine.h	108;"	d
BPB_RootEntCnt	FATFile/calculation.h	/^因为FAT32的BPB_RootEntCnt为0, 所以对于FAT32卷RootDirSectors的值也一定是0;32是$/;"	v
BPB_RootEntCnt	base/FATFATDataDefine.h	42;"	d
BPB_RsvdSecCnt	base/FATFATDataDefine.h	37;"	d
BPB_SecPerTrk	base/FATFATDataDefine.h	53;"	d
BPB_TotSec16	base/FATFATDataDefine.h	47;"	d
BPB_TotSec32	base/FATFATDataDefine.h	59;"	d
BS_BootSig	base/FATFATDataDefine.h	117;"	d
BS_BootSig	base/FATFATDataDefine.h	82;"	d
BS_DrvNum	base/FATFATDataDefine.h	113;"	d
BS_FilSysType	base/FATFATDataDefine.h	121;"	d
BS_FileSysType	base/FATFATDataDefine.h	89;"	d
BS_OEMName	base/FATFATDataDefine.h	25;"	d
BS_Reserved1	base/FATFATDataDefine.h	115;"	d
BS_Reserved1	base/FATFATDataDefine.h	80;"	d
BS_VolID	base/FATFATDataDefine.h	119;"	d
BS_VolID	base/FATFATDataDefine.h	84;"	d
BS_VolLab	base/FATFATDataDefine.h	87;"	d
BS_drvNum	base/FATFATDataDefine.h	78;"	d
BS_jmpBoot	base/FATFATDataDefine.h	23;"	d
BUFFERSIZE	MBR/windows/MBR_windows.cpp	6;"	d	file:
BootIndicator	base/FATMRBDataDefine.h	9;"	d
CC	makefile	/^CC = g++$/;"	m
CDISK	MBR/DiskRead.h	/^class CDISK {$/;"	c
CDISK	ReadPartition/DiskRead.h	/^class CDISK {$/;"	c
CDiskPartition	MBR/DiskPartition.h	/^		CDiskPartition($/;"	f	class:CDiskPartition
CDiskPartition	MBR/DiskPartition.h	/^class CDiskPartition {$/;"	c
CDiskPartition	ReadPartition/FATDiskPartition.cpp	/^CDiskPartition::CDiskPartition($/;"	f	class:CDiskPartition
CDiskPartition	ReadPartition/FATDiskPartition.h	/^class CDiskPartition {$/;"	c
CDiskPartitionList	MBR/MBR.cpp	/^CDiskPartitionList::CDiskPartitionList()$/;"	f	class:CDiskPartitionList
CDiskPartitionList	MBR/MBR.h	/^class CDiskPartitionList {$/;"	c
CMBR	MBR/MBRImpl.h	/^		CMBR() { };$/;"	f	class:CMBR
CMBR	MBR/MBRImpl.h	/^class CMBR {$/;"	c
CMBRFactory	MBR/MBRFactory.h	/^class CMBRFactory {$/;"	c
CMBRFactoryLinux	MBR/linux/MBRFactoryLinux.h	/^		CMBRFactoryLinux() {};$/;"	f	class:CMBRFactoryLinux
CMBRFactoryLinux	MBR/linux/MBRFactoryLinux.h	/^class CMBRFactoryLinux : public CMBRFactory {$/;"	c
CMBRFactoryWindows	MBR/windows/MBRFactoryWindows.h	/^		CMBRFactoryWindows() {};$/;"	f	class:CMBRFactoryWindows
CMBRFactoryWindows	MBR/windows/MBRFactoryWindows.h	/^class CMBRFactoryWindows : public CMBRFactory {$/;"	c
CMBRLinux	MBR/linux/MBRImplLinux.h	/^		CMBRLinux() {};$/;"	f	class:CMBRLinux
CMBRLinux	MBR/linux/MBRImplLinux.h	/^class CMBRLinux : public CMBR {$/;"	c
CMBRWindows	MBR/windows/MBRImplWindows.h	/^		CMBRWindows()$/;"	f	class:CMBRWindows
CMBRWindows	MBR/windows/MBRImplWindows.h	/^class CMBRWindows : public CMBR {$/;"	c
CPPFLAGS	makefile	/^CPPFLAGS = -I . $/;"	m
CPartitionList	ReadPartition/FATPartitionList.h	/^class CPartitionList {$/;"	c
CPhycialDisk	MBR/PhysicalDisk.h	/^class CPhycialDisk {$/;"	c
CPhysicalDisk	ReadPartition/FATPhysicalDisk.cpp	/^CPhysicalDisk::CPhysicalDisk(int fd)$/;"	f	class:CPhysicalDisk
CPhysicalDisk	ReadPartition/FATPhysicalDisk.cpp	/^CPhysicalDisk::CPhysicalDisk(void *handle)$/;"	f	class:CPhysicalDisk
CPhysicalDisk	ReadPartition/FATPhysicalDisk.h	/^class CPhysicalDisk {$/;"	c
CPhysicalDiskFactory	ReadPartition/FATPhysicalDiskFactory.h	/^class CPhysicalDiskFactory {$/;"	c
CPhysicalDiskFactoryLinux	ReadPartition/linux/FATPhysicalDiskFactoryLinux.cpp	/^CPhysicalDiskFactoryLinux::CPhysicalDiskFactoryLinux()$/;"	f	class:CPhysicalDiskFactoryLinux
CPhysicalDiskFactoryLinux	ReadPartition/linux/FATPhysicalDiskFactoryLinux.cpp	/^CPhysicalDiskFactoryLinux::CPhysicalDiskFactoryLinux(const CPhysicalDiskFactoryLinux&)$/;"	f	class:CPhysicalDiskFactoryLinux
CPhysicalDiskFactoryLinux	ReadPartition/linux/FATPhysicalDiskFactoryLinux.h	/^class CPhysicalDiskFactoryLinux : public CPhysicalDiskFactory$/;"	c
CPhysicalDiskFactoryWindows	ReadPartition/windows/FATPhysicalDiskFactoryWindows.cpp	/^CPhysicalDiskFactoryWindows::CPhysicalDiskFactoryWindows()$/;"	f	class:CPhysicalDiskFactoryWindows
CPhysicalDiskFactoryWindows	ReadPartition/windows/FATPhysicalDiskFactoryWindows.cpp	/^CPhysicalDiskFactoryWindows::CPhysicalDiskFactoryWindows(const CPhysicalDiskFactoryWindows&)$/;"	f	class:CPhysicalDiskFactoryWindows
CPhysicalDiskFactoryWindows	ReadPartition/windows/FATPhysicalDiskFactoryWindows.h	/^class CPhysicalDiskFactoryWindows : public CPhysicalDiskFactory$/;"	c
CPhysicalDiskLinux	ReadPartition/linux/FATPhysicalDiskLinux.cpp	/^CPhysicalDiskLinux::CPhysicalDiskLinux(int fd)$/;"	f	class:CPhysicalDiskLinux
CPhysicalDiskLinux	ReadPartition/linux/FATPhysicalDiskLinux.h	/^class CPhysicalDiskLinux : public CPhysicalDisk {$/;"	c
CPhysicalDiskList	ReadPartition/FATPhysicalDiskList.cpp	/^CPhysicalDiskList::CPhysicalDiskList() $/;"	f	class:CPhysicalDiskList
CPhysicalDiskList	ReadPartition/FATPhysicalDiskList.cpp	/^CPhysicalDiskList::CPhysicalDiskList(const CPhysicalDiskList&)$/;"	f	class:CPhysicalDiskList
CPhysicalDiskList	ReadPartition/FATPhysicalDiskList.h	/^class CPhysicalDiskList$/;"	c
CPhysicalDiskListImpl	ReadPartition/FATPhysicalDiskListImpl.h	/^class CPhysicalDiskListImpl {$/;"	c
CPhysicalDiskListImplLinux	ReadPartition/linux/FATPhysicalDiskListImplLinux.h	/^class CPhysicalDiskListImplLinux : public CPhysicalDiskListImpl {$/;"	c
CPhysicalDiskListImplWindows	ReadPartition/windows/FATPhysicalDiskListImplWindows.h	/^class CPhysicalDiskListImplWindows : public CPhysicalDiskListImpl {$/;"	c
CPhysicalDiskWindows	ReadPartition/windows/FATPhysicalDiskWindows.cpp	/^CPhysicalDiskWindows::CPhysicalDiskWindows(void *handle)$/;"	f	class:CPhysicalDiskWindows
CPhysicalDiskWindows	ReadPartition/windows/FATPhysicalDiskWindows.h	/^class CPhysicalDiskWindows : public CPhysicalDisk {$/;"	c
DiskBuf	MBR/linux/MBR_linux.cpp	/^unsigned char	DiskBuf[4096];$/;"	v
DiskFd	MBR/linux/MBR_linux.cpp	/^int	DiskFd;$/;"	v
DisplayError	MBR/windows/MBR_windows.cpp	/^void DisplayError(LPTSTR lpszFunction) $/;"	f
EndCylinder	base/FATMRBDataDefine.h	16;"	d
EndHead	base/FATMRBDataDefine.h	14;"	d
EndSector	base/FATMRBDataDefine.h	15;"	d
EnumPhysicalDisk	ReadPartition/FATPhysicalDiskList.cpp	/^CPhysicalDiskList::EnumPhysicalDisk()$/;"	f	class:CPhysicalDiskList
EnumPhysicalDisk	ReadPartition/linux/FATPhysicalDiskListImplLinux.cpp	/^CPhysicalDiskListImplLinux::EnumPhysicalDisk()$/;"	f	class:CPhysicalDiskListImplLinux
EnumPhysicalDisk	ReadPartition/windows/FATPhysicalDiskListImplWindows.cpp	/^CPhysicalDiskListImplWindows::EnumPhysicalDisk()$/;"	f	class:CPhysicalDiskListImplWindows
FAT16	base/FATFATDataDefine.h	70;"	d
FAT32	base/FATFATDataDefine.h	71;"	d
FATPartTypeName	base/FATPartitionTypeIndicator.h	/^const char *FATPartTypeName[] = {$/;"	v
FATTYPE	base/FATFATDataDefine.h	73;"	d
FAT_PLATFORM_LINUX	platform/FATPlatformConfig.h	5;"	d
FAT_PLATFORM_UNKNOWN	platform/FATPlatformConfig.h	4;"	d
FAT_PLATFORM_WEB	platform/FATPlatformConfig.h	7;"	d
FAT_PLATFORM_WINDOWS	platform/FATPlatformConfig.h	6;"	d
FAT_TARGET_PLATFORM	platform/FATPlatformConfig.h	13;"	d
FAT_TARGET_PLATFORM	platform/FATPlatformConfig.h	14;"	d
FAT_TARGET_PLATFORM	platform/FATPlatformConfig.h	19;"	d
FAT_TARGET_PLATFORM	platform/FATPlatformConfig.h	20;"	d
FAT_TARGET_PLATFORM	platform/FATPlatformConfig.h	25;"	d
FAT_TARGET_PLATFORM	platform/FATPlatformConfig.h	26;"	d
FAT_TARGET_PLATFORM	platform/FATPlatformConfig.h	9;"	d
FileIOCompletionRoutine	MBR/windows/MBR_windows.cpp	/^VOID CALLBACK FileIOCompletionRoutine($/;"	f
GETCONTENT	ReadPartition/FATPartitionList.cpp	4;"	d	file:
GetActivePartition	MBR/DiskPartition.h	/^		bool	GetActivePartition() const {$/;"	f	class:CDiskPartition
GetActivePartition	ReadPartition/FATDiskPartition.h	/^		bool	GetActivePartition() const {$/;"	f	class:CDiskPartition
GetCount	ReadPartition/FATPhysicalDiskList.cpp	/^CPhysicalDiskList::GetCount() const$/;"	f	class:CPhysicalDiskList
GetEndCylinderNo	MBR/DiskPartition.h	/^		INT8	GetEndCylinderNo() const {$/;"	f	class:CDiskPartition
GetEndCylinderNo	ReadPartition/FATDiskPartition.h	/^		INT8	GetEndCylinderNo() const {$/;"	f	class:CDiskPartition
GetEndHeadNo	MBR/DiskPartition.h	/^		INT8	GetEndHeadNo() const {$/;"	f	class:CDiskPartition
GetEndHeadNo	ReadPartition/FATDiskPartition.h	/^		INT8	GetEndHeadNo() const {$/;"	f	class:CDiskPartition
GetEndSecNo	MBR/DiskPartition.h	/^		INT8	GetEndSecNo() const {$/;"	f	class:CDiskPartition
GetEndSecNo	ReadPartition/FATDiskPartition.h	/^		INT8	GetEndSecNo() const {$/;"	f	class:CDiskPartition
GetFactoryInstance	MBR/linux/MBRFactoryLinux.h	/^		static CMBRFactoryLinux* GetFactoryInstance()$/;"	f	class:CMBRFactoryLinux
GetFactoryInstance	MBR/windows/MBRFactoryWindows.h	/^		static CMBRFactoryWindows* GetFactoryInstance()$/;"	f	class:CMBRFactoryWindows
GetFactoryInstance	ReadPartition/linux/FATPhysicalDiskFactoryLinux.h	/^	static CPhysicalDiskFactoryLinux* GetFactoryInstance()$/;"	f	class:CPhysicalDiskFactoryLinux
GetFactoryInstance	ReadPartition/windows/FATPhysicalDiskFactoryWindows.h	/^	static CPhysicalDiskFactoryWindows* GetFactoryInstance()$/;"	f	class:CPhysicalDiskFactoryWindows
GetInstance	ReadPartition/FATPhysicalDiskList.cpp	/^CPhysicalDiskList::GetInstance()$/;"	f	class:CPhysicalDiskList
GetInstance	test/a.cpp	/^Singleton::GetInstance()$/;"	f	class:Singleton
GetMBRFactory	MBR/MBRFactory.cpp	/^CMBRFactory::GetMBRFactory()$/;"	f	class:CMBRFactory
GetName	MBR/DiskPartition.h	/^		const std::string* GetName() const {$/;"	f	class:CDiskPartition
GetName	ReadPartition/FATDiskPartition.h	/^		const std::string* GetName() const {$/;"	f	class:CDiskPartition
GetPartitionActiveFlag	MBR/MBR.cpp	/^CDiskPartitionList::GetPartitionActiveFlag(const int which) const$/;"	f	class:CDiskPartitionList
GetPartitionActiveFlag	MBR/MBRImpl.cpp	/^CMBR::GetPartitionActiveFlag(const int id) const$/;"	f	class:CMBR
GetPartitionCount	MBR/MBR.cpp	/^CDiskPartitionList::GetPartitionCount() const$/;"	f	class:CDiskPartitionList
GetPartitionCount	MBR/MBRImpl.cpp	/^CMBR::GetPartitionCount() const$/;"	f	class:CMBR
GetPartitionName	MBR/MBR.cpp	/^CDiskPartitionList::GetPartitionName(const int which) const$/;"	f	class:CDiskPartitionList
GetPartitionName	MBR/MBRImpl.cpp	/^CMBR::GetPartitionName(const int id) const$/;"	f	class:CMBR
GetPartitionTolSec	MBR/MBR.cpp	/^CDiskPartitionList::GetPartitionTolSec(const int which) const$/;"	f	class:CDiskPartitionList
GetPartitionTolSec	MBR/MBRImpl.cpp	/^CMBR::GetPartitionTolSec(const int id) const$/;"	f	class:CMBR
GetPartitionTypeIndicator	MBR/DiskPartition.h	/^		INT8	GetPartitionTypeIndicator() const  {$/;"	f	class:CDiskPartition
GetPartitionTypeIndicator	ReadPartition/FATDiskPartition.h	/^		INT8	GetPartitionTypeIndicator() const  {$/;"	f	class:CDiskPartition
GetPhycsicalDiskName	MBR/PhysicalDisk.cpp	/^CPhycialDisk::GetPhycsicalDiskName()$/;"	f	class:CPhycialDisk
GetPhysicalDiskByID	ReadPartition/FATPhysicalDiskList.cpp	/^CPhysicalDiskList::GetPhysicalDiskByID(const int which) const$/;"	f	class:CPhysicalDiskList
GetPhysicalDiskByID	ReadPartition/FATPhysicalDiskListImpl.cpp	/^CPhysicalDiskListImpl::GetPhysicalDiskByID(const int which) const$/;"	f	class:CPhysicalDiskListImpl
GetPhysicalDiskCount	ReadPartition/FATPhysicalDiskListImpl.cpp	/^CPhysicalDiskListImpl::GetPhysicalDiskCount() const$/;"	f	class:CPhysicalDiskListImpl
GetPhysicalDiskFactory	ReadPartition/FATPhysicalDiskFactory.cpp	/^CPhysicalDiskFactory::GetPhysicalDiskFactory()$/;"	f	class:CPhysicalDiskFactory
GetPhysicalDiskNameByID	ReadPartition/FATPhysicalDiskListImpl.cpp	/^CPhysicalDiskListImpl::GetPhysicalDiskNameByID(const int which) const$/;"	f	class:CPhysicalDiskListImpl
GetSecPrecedingPartition	MBR/DiskPartition.h	/^		INT32	GetSecPrecedingPartition() const {$/;"	f	class:CDiskPartition
GetSecPrecedingPartition	ReadPartition/FATDiskPartition.h	/^		INT32	GetSecPrecedingPartition() const {$/;"	f	class:CDiskPartition
GetStartCylinderNo	MBR/DiskPartition.h	/^		INT8	GetStartCylinderNo() const {$/;"	f	class:CDiskPartition
GetStartCylinderNo	ReadPartition/FATDiskPartition.h	/^		INT8	GetStartCylinderNo() const {$/;"	f	class:CDiskPartition
GetStartHeadNo	MBR/DiskPartition.h	/^		INT8	GetStartHeadNo()  const {$/;"	f	class:CDiskPartition
GetStartHeadNo	ReadPartition/FATDiskPartition.h	/^		INT8	GetStartHeadNo()  const {$/;"	f	class:CDiskPartition
GetStartSecNO	MBR/DiskPartition.h	/^		INT8	GetStartSecNO() const { $/;"	f	class:CDiskPartition
GetStartSecNO	ReadPartition/FATDiskPartition.h	/^		INT8	GetStartSecNO() const { $/;"	f	class:CDiskPartition
GetTotalSec	MBR/DiskPartition.h	/^		INT32	GetTotalSec() const {$/;"	f	class:CDiskPartition
GetTotalSec	ReadPartition/FATDiskPartition.h	/^		INT32	GetTotalSec() const {$/;"	f	class:CDiskPartition
HANDLE	ReadPartition/FATPhysicalDisk.h	/^		void	*HANDLE;$/;"	m	union:CPhysicalDisk::__anon1
INT16	base/FATBasicDataDefine.h	/^typedef short	INT16;$/;"	t
INT32	base/FATBasicDataDefine.h	/^typedef	long	INT32;$/;"	t
INT64	base/FATBasicDataDefine.h	/^typedef	LONGLONG	INT64;$/;"	t
INT64	base/FATBasicDataDefine.h	/^typedef	long long	INT64;$/;"	t
INT8	base/FATBasicDataDefine.h	/^typedef	char	INT8;$/;"	t
MAXPHYSICALDISKNUMBER	base/FATBasicDataDefine.h	45;"	d
MakeMBR	MBR/linux/MBRFactoryLinux.cpp	/^CMBRFactoryLinux::MakeMBR()$/;"	f	class:CMBRFactoryLinux
MakeMBR	MBR/windows/MBRFactoryWindows.cpp	/^CMBRFactoryWindows::MakeMBR()$/;"	f	class:CMBRFactoryWindows
MakePhysicalDisk	ReadPartition/linux/FATPhysicalDiskFactoryLinux.cpp	/^CPhysicalDiskFactoryLinux::MakePhysicalDisk()$/;"	f	class:CPhysicalDiskFactoryLinux
MakePhysicalDisk	ReadPartition/windows/FATPhysicalDiskFactoryWindows.cpp	/^CPhysicalDiskFactoryWindows::MakePhysicalDisk()$/;"	f	class:CPhysicalDiskFactoryWindows
NULL	test/a.cpp	3;"	d	file:
Objects	makefile	/^Objects = FATPhysicalDisk.o FATPhysicalDiskLinux.o			\\$/;"	m
PartionType	base/FATMRBDataDefine.h	13;"	d
PrintMBR	MBR/linux/MBR_linux.cpp	/^void PrintMBR(const unsigned char *src)$/;"	f
Read	MBR/DiskRead.cpp	/^INT64 Read(INT64 secNum, UINT8* buf)$/;"	f
ReadEBR	MBR/linux/MBR_linux.cpp	/^void ReadEBR(int fildes, long long offset)$/;"	f
ReadEBR	MBR/windows/MBR_windows.cpp	/^void	ReadEBR(HANDLE hfile, __int64 offset)$/;"	f
ReadSector	ReadPartition/linux/FATPhysicalDiskLinux.cpp	/^CPhysicalDiskLinux::ReadSector(INT64 secNum, void *buf, INT64 bytes)$/;"	f	class:CPhysicalDiskLinux
ReadSector	ReadPartition/windows/FATPhysicalDiskWindows.cpp	/^CPhysicalDiskWindows::ReadSector(INT64 secNum, void *buf, INT64 bytes)$/;"	f	class:CPhysicalDiskWindows
RootDirSectors	FATFile/calculation.h	/^因为FAT32的BPB_RootEntCnt为0, 所以对于FAT32卷RootDirSectors的值也一定是0;32是$/;"	v
SOURCES	makefile	/^SOURCES = FATPhysicalDisk.cpp			\\$/;"	m
Scan	MBR/MBR.cpp	/^CDiskPartitionList::Scan()$/;"	f	class:CDiskPartitionList
Scan	MBR/linux/MBRImplLinux.cpp	/^CMBRLinux::Scan()$/;"	f	class:CMBRLinux
Scan	MBR/windows/MBRImplWindows.cpp	/^CMBRWindows::Scan()$/;"	f	class:CMBRWindows
ScanPartition	ReadPartition/FATPartitionList.cpp	/^CPartitionList::ScanPartition()$/;"	f	class:CPartitionList
SecsInPart	base/FATMRBDataDefine.h	19;"	d
SecsPrePart	base/FATMRBDataDefine.h	17;"	d
Seek	ReadPartition/linux/FATPhysicalDiskLinux.cpp	/^CPhysicalDiskLinux::Seek(INT64 secNum, int whence)$/;"	f	class:CPhysicalDiskLinux
Seek	ReadPartition/windows/FATPhysicalDiskWindows.cpp	/^CPhysicalDiskWindows::Seek(INT64 secNum, int whence)$/;"	f	class:CPhysicalDiskWindows
Singleton	test/a.cpp	/^Singleton::Singleton()$/;"	f	class:Singleton
Singleton	test/a.cpp	/^Singleton::Singleton(const Singleton&)$/;"	f	class:Singleton
Singleton	test/a.h	/^class Singleton {$/;"	c
StartCylinder	base/FATMRBDataDefine.h	12;"	d
StartHead	base/FATMRBDataDefine.h	10;"	d
StartSector	base/FATMRBDataDefine.h	11;"	d
UINT16	base/FATBasicDataDefine.h	/^typedef unsigned short	UINT16;$/;"	t
UINT32	base/FATBasicDataDefine.h	/^typedef	DWORD		UINT32;$/;"	t
UINT32	base/FATBasicDataDefine.h	/^typedef unsigned long	UINT32;$/;"	t
UINT64	base/FATBasicDataDefine.h	/^typedef	ULONGLONG	UINT64;$/;"	t
UINT64	base/FATBasicDataDefine.h	/^typedef unsigned long long	UINT64;$/;"	t
UINT8	base/FATBasicDataDefine.h	/^typedef	BYTE		UINT8;$/;"	t
UINT8	base/FATBasicDataDefine.h	/^typedef	unsigned char	UINT8;$/;"	t
UNIT16	base/FATBasicDataDefine.h	/^typedef	WORD		UNIT16;$/;"	t
VPATH	makefile	/^VPATH = . base \\$/;"	m
WriteSector	ReadPartition/linux/FATPhysicalDiskLinux.cpp	/^CPhysicalDiskLinux::WriteSector(INT64 secNum, const void *buf, INT64 bytes)$/;"	f	class:CPhysicalDiskLinux
WriteSector	ReadPartition/windows/FATPhysicalDiskWindows.cpp	/^CPhysicalDiskWindows::WriteSector(INT64 secNum, const void *buf, INT64 bytes)$/;"	f	class:CPhysicalDiskWindows
_FAT_DISKREAD_H__	MBR/DiskRead.h	2;"	d
_FAT_DISKREAD_H__	ReadPartition/DiskRead.h	2;"	d
_FAT_MBR_DATA_DEFINE_H__	base/FATMRBDataDefine.h	2;"	d
_FAT_PARTITIONLISTIMPL_H__	ReadPartition/FATPhysicalDiskListImpl.h	2;"	d
_FAT_PARTITONLIST_H__	ReadPartition/FATPartitionList.h	2;"	d
_FAT_PHYSICAL_DISK_FACTORY_H__	ReadPartition/FATPhysicalDiskFactory.h	2;"	d
_FAT_PHYSICAL_DISK_FACTORY_LINUX_H__	ReadPartition/linux/FATPhysicalDiskFactoryLinux.h	2;"	d
_FAT_PHYSICAL_DISK_FACTORY_WINDOWS_H__	ReadPartition/windows/FATPhysicalDiskFactoryWindows.h	2;"	d
_FAT_PHYSICAL_DISK_H__	MBR/PhysicalDisk.h	2;"	d
_FAT_PHYSICAL_DISK_H__	ReadPartition/FATPhysicalDisk.h	2;"	d
_FAT_PHYSICAL_DISK_LINUX_H__	ReadPartition/linux/FATPhysicalDiskLinux.h	2;"	d
_FAT_PHYSICAL_DISK_LISTIMPL_LINUX_H__	ReadPartition/linux/FATPhysicalDiskListImplLinux.h	2;"	d
_FAT_PHYSICAL_DISK_LIST_IMPL_WINDOWS_H__	ReadPartition/windows/FATPhysicalDiskListImplWindows.h	2;"	d
_FAT_PHYSICAL_DISK_WINDOWS_H__	ReadPartition/windows/FATPhysicalDiskWindows.h	2;"	d
_FAT_STD_C_H__	platform/linux/FATStdCLinux.h	2;"	d
_FAT_SYSTEM_ERROR_H__	errorSystem/error.h	2;"	d
__FATPLATFORMDEFINE_H__	platform/linux/FATPlatformDefineLinux.h	2;"	d
__FATPLATFORMDEFINE_H__	platform/win32/FATPlatformDefineWin32.h	2;"	d
__FAT_BASCI_DATA_DEFINE_H__	base/FATBasicDataDefine.h	2;"	d
__FAT_DISKPARTITION_H__	MBR/DiskPartition.h	2;"	d
__FAT_DISKPARTITION_H__	ReadPartition/FATDiskPartition.h	2;"	d
__FAT_DISK_PARTITION_LIST_H__	MBR/MBR.h	2;"	d
__FAT_FAT_DATA_DEFINE_H__	base/FATFATDataDefine.h	2;"	d
__FAT_H__	fat.h	2;"	d
__FAT_MBR_FACTORY_H__	MBR/MBRFactory.h	2;"	d
__FAT_MBR_FACTORY_LINUX_H__	MBR/linux/MBRFactoryLinux.h	2;"	d
__FAT_MBR_FACTORY_WINDOWS_H__	MBR/windows/MBRFactoryWindows.h	2;"	d
__FAT_MBR_H__	MBR/MBRImpl.h	2;"	d
__FAT_MBR_IMPL_LINUX_H__	MBR/linux/MBRImplLinux.h	2;"	d
__FAT_MBR_IMPL_WINDOWS_H__	MBR/windows/MBRImplWindows.h	2;"	d
__FAT_PARTITION_TYPE_INDICATOR_H__	base/FATPartitionTypeIndicator.h	2;"	d
__FAT_PLATFORM_CONFIG_H__	platform/FATPlatformConfig.h	2;"	d
__FAT_STD_C_H__	platform/win32/FATStdCWin32.h	2;"	d
_tmain	MBR/windows/MBR_windows.cpp	/^void __cdecl _tmain(int argc,  TCHAR *argv[])$/;"	f
fd	ReadPartition/FATPhysicalDisk.h	/^		int	fd;$/;"	m	union:CPhysicalDisk::__anon1
fd	test/testUnion.cpp	/^			int	fd;$/;"	m	union:A::__anon2	file:
g_BytesTransferred	MBR/windows/MBR_windows.cpp	/^DWORD	g_BytesTransferred = 0;$/;"	v
g_iPartitionNum	MBR/linux/MBR_linux.cpp	/^int	g_iPartitionNum = 0;$/;"	v
g_iPartitionNum	MBR/windows/MBR_windows.cpp	/^DWORD	g_iPartitionNum = 0;$/;"	v
handle	test/testUnion.cpp	/^			void *handle;$/;"	m	union:A::__anon2	file:
m_ActivePartition	MBR/DiskPartition.h	/^		bool	m_ActivePartition;\/\/活动分区标志$/;"	m	class:CDiskPartition
m_ActivePartition	ReadPartition/FATDiskPartition.h	/^		bool	m_ActivePartition;\/\/活动分区标志$/;"	m	class:CDiskPartition
m_EndCylinderNo	MBR/DiskPartition.h	/^		INT8	m_EndCylinderNo;\/\/终止柱面号(柱面号的高2位存放在扇区字节的高2位)$/;"	m	class:CDiskPartition
m_EndCylinderNo	ReadPartition/FATDiskPartition.h	/^		INT8	m_EndCylinderNo;\/\/终止柱面号(柱面号的高2位存放在扇区字节的高2位)$/;"	m	class:CDiskPartition
m_EndHeadNo	MBR/DiskPartition.h	/^		INT8	m_EndHeadNo;\/\/结束磁头号$/;"	m	class:CDiskPartition
m_EndHeadNo	ReadPartition/FATDiskPartition.h	/^		INT8	m_EndHeadNo;\/\/结束磁头号$/;"	m	class:CDiskPartition
m_EndSecNo	MBR/DiskPartition.h	/^		INT8	m_EndSecNo;\/\/结束扇区号$/;"	m	class:CDiskPartition
m_EndSecNo	ReadPartition/FATDiskPartition.h	/^		INT8	m_EndSecNo;\/\/结束扇区号$/;"	m	class:CDiskPartition
m_PartitionName	MBR/DiskPartition.h	/^		std::string	m_PartitionName;\/\/注意这个成员变量并不属于磁盘分区的标准，是为了方便自己加的$/;"	m	class:CDiskPartition
m_PartitionName	ReadPartition/FATDiskPartition.h	/^		std::string	m_PartitionName;\/\/注意这个成员变量并不属于磁盘分区的标准，是为了方便自己加的$/;"	m	class:CDiskPartition
m_PartitionTypeIndicator	MBR/DiskPartition.h	/^		INT8	m_PartitionTypeIndicator;\/\/分区格式标志$/;"	m	class:CDiskPartition
m_PartitionTypeIndicator	ReadPartition/FATDiskPartition.h	/^		INT8	m_PartitionTypeIndicator;\/\/分区格式标志$/;"	m	class:CDiskPartition
m_SecPrecedingPartition	MBR/DiskPartition.h	/^		INT32	m_SecPrecedingPartition;\/\/本分区之前已用扇区数目$/;"	m	class:CDiskPartition
m_SecPrecedingPartition	ReadPartition/FATDiskPartition.h	/^		INT32	m_SecPrecedingPartition;\/\/本分区之前已用扇区数目$/;"	m	class:CDiskPartition
m_StartCylinderNo	MBR/DiskPartition.h	/^		INT8	m_StartCylinderNo;\/\/起始柱面号$/;"	m	class:CDiskPartition
m_StartCylinderNo	ReadPartition/FATDiskPartition.h	/^		INT8	m_StartCylinderNo;\/\/起始柱面号$/;"	m	class:CDiskPartition
m_StartHeadNo	MBR/DiskPartition.h	/^		INT8	m_StartHeadNo;\/\/起始磁头号$/;"	m	class:CDiskPartition
m_StartHeadNo	ReadPartition/FATDiskPartition.h	/^		INT8	m_StartHeadNo;\/\/起始磁头号$/;"	m	class:CDiskPartition
m_StartSecNo	MBR/DiskPartition.h	/^		INT8	m_StartSecNo;\/\/起始扇区号$/;"	m	class:CDiskPartition
m_StartSecNo	ReadPartition/FATDiskPartition.h	/^		INT8	m_StartSecNo;\/\/起始扇区号$/;"	m	class:CDiskPartition
m_TotSec	MBR/DiskPartition.h	/^		INT32	m_TotSec;\/\/本分区扇区总数$/;"	m	class:CDiskPartition
m_TotSec	ReadPartition/FATDiskPartition.h	/^		INT32	m_TotSec;\/\/本分区扇区总数$/;"	m	class:CDiskPartition
m_diskHandle	ReadPartition/FATPhysicalDisk.h	/^	} m_diskHandle;$/;"	m	class:CPhysicalDisk	typeref:union:CPhysicalDisk::__anon1
m_diskImpl	MBR/DiskRead.h	/^		CDISKImpl*	m_diskImpl;$/;"	m	class:CDISK
m_diskImpl	ReadPartition/DiskRead.h	/^		CDISKImpl*	m_diskImpl;$/;"	m	class:CDISK
m_diskPartitionImpl	MBR/MBR.h	/^		CMBR	*m_diskPartitionImpl;$/;"	m	class:CDiskPartitionList
m_diskPartitionList	ReadPartition/FATPartitionList.h	/^		std::vector<CDiskPartition>	m_diskPartitionList;$/;"	m	class:CPartitionList
m_handle	test/testUnion.cpp	/^		} m_handle;$/;"	m	class:A	typeref:union:A::__anon2	file:
m_partitionList	MBR/MBRImpl.h	/^		std::vector<CDiskPartition>	m_partitionList;$/;"	m	class:CMBR
m_physicalDiskList	ReadPartition/FATPhysicalDiskListImpl.h	/^		std::vector<CPhysicalDisk*>	m_physicalDiskList;$/;"	m	class:CPhysicalDiskListImpl
m_physicalDiskListInstance	ReadPartition/FATPhysicalDiskList.cpp	/^CPhysicalDiskList*	CPhysicalDiskList::m_physicalDiskListInstance = NULL;$/;"	m	class:CPhysicalDiskList	file:
m_physicalDiskListInstance	ReadPartition/FATPhysicalDiskList.h	/^		static	CPhysicalDiskList	*m_physicalDiskListInstance;$/;"	m	class:CPhysicalDiskList
m_physicalDiskName	MBR/PhysicalDisk.h	/^	std::string	m_physicalDiskName;$/;"	m	class:CPhycialDisk
m_physicalDiskNo	MBR/PhysicalDisk.h	/^	int	m_physicalDiskNo;$/;"	m	class:CPhycialDisk
m_physicalListImpl	ReadPartition/FATPhysicalDiskList.h	/^		CPhysicalDiskListImpl	*m_physicalListImpl;$/;"	m	class:CPhysicalDiskList
m_s	test/a.cpp	/^Singleton* Singleton::m_s = 0;$/;"	m	class:Singleton	file:
m_s	test/a.h	/^	static Singleton *m_s;$/;"	m	class:Singleton
main	MBR/diskPartition.cpp	/^main(void)$/;"	f
main	MBR/linux/MBR_linux.cpp	/^main(int argc, char *argv[])$/;"	f
main	ReadPartition/main.cpp	/^int main(void)$/;"	f
main	test/testFATBasicDataDefine.cpp	/^main(void)$/;"	f
main	test/testFATMBRDataDefine.cpp	/^main(void)$/;"	f
main	test/testFATPhysicalDiskList.cpp	/^main(void)$/;"	f
main	test/testFATPlatformConfig.cpp	/^int main(void)$/;"	f
main	test/testSingleton.cpp	/^main(void)$/;"	f
main	test/testString.cpp	/^main(void)$/;"	f
main	test/testUnion.cpp	/^main(void)$/;"	f
n	MBR/linux/MBR_linux.cpp	/^int	n;$/;"	v
printNowOffset	MBR/linux/MBR_linux.cpp	/^void printNowOffset(int files)$/;"	f
printSectorContent	MBR/linux/MBR_linux.cpp	/^void printSectorContent(const unsigned char *src, int size)$/;"	f
sectorNo	MBR/linux/MBR_linux.cpp	/^int	sectorNo = 0;$/;"	v
sectorSize	MBR/linux/MBR_linux.cpp	/^int	sectorSize = 512;$/;"	v
wszDrive	MBR/windows/MBR_windows.cpp	7;"	d	file:
~CDiskPartition	MBR/DiskPartition.h	/^		~CDiskPartition() {};$/;"	f	class:CDiskPartition
~CDiskPartition	ReadPartition/FATDiskPartition.h	/^		~CDiskPartition() {};$/;"	f	class:CDiskPartition
~CDiskPartitionList	MBR/MBR.cpp	/^CDiskPartitionList::~CDiskPartitionList()$/;"	f	class:CDiskPartitionList
~CMBR	MBR/MBRImpl.h	/^		virtual ~CMBR() { };$/;"	f	class:CMBR
~CMBRFactory	MBR/MBRFactory.h	/^	virtual	~CMBRFactory()$/;"	f	class:CMBRFactory
~CMBRFactoryLinux	MBR/linux/MBRFactoryLinux.h	/^		virtual ~CMBRFactoryLinux() {};$/;"	f	class:CMBRFactoryLinux
~CMBRFactoryWindows	MBR/windows/MBRFactoryWindows.h	/^		virtual ~CMBRFactoryWindows() {};$/;"	f	class:CMBRFactoryWindows
~CMBRLinux	MBR/linux/MBRImplLinux.h	/^		virtual ~CMBRLinux() {};$/;"	f	class:CMBRLinux
~CMBRWindows	MBR/windows/MBRImplWindows.h	/^		virtual ~CMBRWindows()$/;"	f	class:CMBRWindows
~CPhysicalDiskFactory	ReadPartition/FATPhysicalDiskFactory.h	/^		virtual ~CPhysicalDiskFactory() { };$/;"	f	class:CPhysicalDiskFactory
~CPhysicalDiskFactoryLinux	ReadPartition/linux/FATPhysicalDiskFactoryLinux.cpp	/^CPhysicalDiskFactoryLinux::~CPhysicalDiskFactoryLinux()$/;"	f	class:CPhysicalDiskFactoryLinux
~CPhysicalDiskFactoryWindows	ReadPartition/windows/FATPhysicalDiskFactoryWindows.cpp	/^CPhysicalDiskFactoryWindows::~CPhysicalDiskFactoryWindows()$/;"	f	class:CPhysicalDiskFactoryWindows
